MobX -  що робить державне управління простим та масштабованим,
    прозоро застосовуючи функціональне реактивне програмування (TFRP). 
    Філософія позаду MobX дуже проста:
        Все, що може бути виведено з держави програми, повинно бути отримано. Автоматично.
        який включає в себе інтерфейс користувача, серіалізацію даних, серверне спілкування тощо.

-- MobX надає механізм для зберігання та оновлення стану програми --

MobX надає механізми для оптимального синхронізації стану програми з компонентами ,
    використовуючи реактивний віртуальний графік стану залежностей, який оновлюється 
    лише тоді, коли він є строго необхідним і ніколи не стає застарілим.

Computed values:
    За допомогою MobX ви можете визначити значення, які будуть автоматично виводитися
    при зміні релевантних даних. Використовуючи @computed.
    May be more @computed to one @observable which will be give return kind of result, that's fine).
    Aвтоматично оновлюється.

Reactions:
    Реакції схожі на обчислене значення, але замість того, щоб створювати нове значення,
    реакція створює побічний ефект для таких речей, як друк на консолі, створення запитів 
    мережі, поступове оновлення дерева компонентів React для виправлення DOM тощо. Коротше
    кажучи, реакції мост реактивне та імперативне програмування.

MobX реагує на будь-яке існуюче спостережуване властивість, яке читається під час виконання відслідкованої функції.
    "читання" - це зняття властивості об'єкта, яке може бути зроблено шляхом "пунктирування" в нього (наприклад, user.name) 
    або за допомогою позначення кронштейна (наприклад, user['name']).
    " trackable functions відстежувані функції" є вираженням computed, render()методом компонента спостерігача та функціями,
    які передаються як перший парам when, reactionі autorun.
    "reading під час" означає, що відслідковуються лише ті спостережувані об'єкти, які читаються під час виконання функції.
    Неважливо, чи буде ці значення прямо чи опосередковано використовувати відстежувана функція.

    Іншими словами, MobX не реагує на:

    Значення, отримані від спостережуваних, але за межами відстежуваної функції
    Спостережувані значення, які читаються в асинхронно викликаному кодовому блоці

Actions
    На відміну від багатьох рамок потоку, MobX не визначає, як слід керувати події користувача.

    Це можна зробити в Flux як спосіб.
    Або обробляючи події за допомогою RxJS.
    Або, просто намагаючись обробляти події максимально простими способами, як це показано у вищевказаному onClickобробнику.
    Зрештою, це все зводиться до: Якось держава повинна бути оновлена.

MobX - це одна з найменш нав'язливих бібліотек, яку ви можете використовувати для державного управління.
Це робить MobXпідхід не просто простим, але й дуже масштабованим:

Посилальна цілісність гарантується
Оскільки дані не потрібно нормалізувати, і MobX автоматично відстежує відносини між державою та похідними, 
ви отримуєте цілісність референції безкоштовно. Отримання щось, що досягається за допомогою трьох рівнів індирекції?

Немає проблем, MobX буде відслідковувати їх і повторно відтворювати, коли змінюється одна з посилань.
В результаті жорстокість помилок - це справа минулого. Як програміст, ви можете забути, що зміна деяких даних може вплинути на, здавалося б, незв'язаний компонент у кутовому випадку. MobX не забуде.

Простіші дії простіше підтримувати
Як показано вище, зміна стану при використанні MobX дуже проста. Ви просто записуєте свої наміри. MobX подбає про інше.

Легка сумісність

MobX натхненний принципами реактивного програмування, що містяться в електронних таблицях. Це натхненне середовища MVVM,
як у MeteorJS tracker, нокауті та Vue.js. Але MobX забезпечує прозоре функціональне реактивне програмування на наступний 
рівень і забезпечує самостійну реалізацію. Він реалізує TFRP без збій, синхронним, передбачуваним та ефективним способом.

Тонна кредитів для Mendix , для забезпечення гнучкості та підтримки для підтримки MobX та можливості підтвердження 
філософії MobX у реальних, складних, важливих для роботи продуктах.